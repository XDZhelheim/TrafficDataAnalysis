// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_pb.proto

#ifndef PROTOBUF_traffic_5fpb_2eproto__INCLUDED
#define PROTOBUF_traffic_5fpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_traffic_5fpb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTrafficMetaImpl();
void InitDefaultsTrafficMeta();
void InitDefaultsDetailInfoImpl();
void InitDefaultsDetailInfo();
void InitDefaultsTrafficFlowImpl();
void InitDefaultsTrafficFlow();
void InitDefaultsTrafficDataImpl();
void InitDefaultsTrafficData();
inline void InitDefaults() {
  InitDefaultsTrafficMeta();
  InitDefaultsDetailInfo();
  InitDefaultsTrafficFlow();
  InitDefaultsTrafficData();
}
}  // namespace protobuf_traffic_5fpb_2eproto
namespace its {
namespace service {
class DetailInfo;
class DetailInfoDefaultTypeInternal;
extern DetailInfoDefaultTypeInternal _DetailInfo_default_instance_;
class TrafficData;
class TrafficDataDefaultTypeInternal;
extern TrafficDataDefaultTypeInternal _TrafficData_default_instance_;
class TrafficFlow;
class TrafficFlowDefaultTypeInternal;
extern TrafficFlowDefaultTypeInternal _TrafficFlow_default_instance_;
class TrafficMeta;
class TrafficMetaDefaultTypeInternal;
extern TrafficMetaDefaultTypeInternal _TrafficMeta_default_instance_;
}  // namespace service
}  // namespace its
namespace its {
namespace service {

// ===================================================================

class TrafficMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:its.service.TrafficMeta) */ {
 public:
  TrafficMeta();
  virtual ~TrafficMeta();

  TrafficMeta(const TrafficMeta& from);

  inline TrafficMeta& operator=(const TrafficMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficMeta(TrafficMeta&& from) noexcept
    : TrafficMeta() {
    *this = ::std::move(from);
  }

  inline TrafficMeta& operator=(TrafficMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficMeta* internal_default_instance() {
    return reinterpret_cast<const TrafficMeta*>(
               &_TrafficMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TrafficMeta* other);
  friend void swap(TrafficMeta& a, TrafficMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficMeta& from);
  void MergeFrom(const TrafficMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string extra_keys = 6;
  int extra_keys_size() const;
  void clear_extra_keys();
  static const int kExtraKeysFieldNumber = 6;
  const ::std::string& extra_keys(int index) const;
  ::std::string* mutable_extra_keys(int index);
  void set_extra_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra_keys(int index, ::std::string&& value);
  #endif
  void set_extra_keys(int index, const char* value);
  void set_extra_keys(int index, const char* value, size_t size);
  ::std::string* add_extra_keys();
  void add_extra_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_extra_keys(::std::string&& value);
  #endif
  void add_extra_keys(const char* value);
  void add_extra_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra_keys();

  // repeated string extra_values = 7;
  int extra_values_size() const;
  void clear_extra_values();
  static const int kExtraValuesFieldNumber = 7;
  const ::std::string& extra_values(int index) const;
  ::std::string* mutable_extra_values(int index);
  void set_extra_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra_values(int index, ::std::string&& value);
  #endif
  void set_extra_values(int index, const char* value);
  void set_extra_values(int index, const char* value, size_t size);
  ::std::string* add_extra_values();
  void add_extra_values(const ::std::string& value);
  #if LANG_CXX11
  void add_extra_values(::std::string&& value);
  #endif
  void add_extra_values(const char* value);
  void add_extra_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra_values();

  // required string magic = 1;
  bool has_magic() const;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  const ::std::string& magic() const;
  void set_magic(const ::std::string& value);
  #if LANG_CXX11
  void set_magic(::std::string&& value);
  #endif
  void set_magic(const char* value);
  void set_magic(const char* value, size_t size);
  ::std::string* mutable_magic();
  ::std::string* release_magic();
  void set_allocated_magic(::std::string* magic);

  // required uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // required int32 region_id = 3;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 3;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // required fixed32 batch_time = 4;
  bool has_batch_time() const;
  void clear_batch_time();
  static const int kBatchTimeFieldNumber = 4;
  ::google::protobuf::uint32 batch_time() const;
  void set_batch_time(::google::protobuf::uint32 value);

  // required fixed32 update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  ::google::protobuf::uint32 update_time() const;
  void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:its.service.TrafficMeta)
 private:
  void set_has_magic();
  void clear_has_magic();
  void set_has_version();
  void clear_has_version();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_batch_time();
  void clear_has_batch_time();
  void set_has_update_time();
  void clear_has_update_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_values_;
  ::google::protobuf::internal::ArenaStringPtr magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::uint32 batch_time_;
  ::google::protobuf::uint32 update_time_;
  friend struct ::protobuf_traffic_5fpb_2eproto::TableStruct;
  friend void ::protobuf_traffic_5fpb_2eproto::InitDefaultsTrafficMetaImpl();
};
// -------------------------------------------------------------------

class DetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:its.service.DetailInfo) */ {
 public:
  DetailInfo();
  virtual ~DetailInfo();

  DetailInfo(const DetailInfo& from);

  inline DetailInfo& operator=(const DetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetailInfo(DetailInfo&& from) noexcept
    : DetailInfo() {
    *this = ::std::move(from);
  }

  inline DetailInfo& operator=(DetailInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailInfo* internal_default_instance() {
    return reinterpret_cast<const DetailInfo*>(
               &_DetailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DetailInfo* other);
  friend void swap(DetailInfo& a, DetailInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetailInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DetailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DetailInfo& from);
  void MergeFrom(const DetailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 link_off = 1;
  int link_off_size() const;
  void clear_link_off();
  static const int kLinkOffFieldNumber = 1;
  ::google::protobuf::uint32 link_off(int index) const;
  void set_link_off(int index, ::google::protobuf::uint32 value);
  void add_link_off(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      link_off() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_link_off();

  // @@protoc_insertion_point(class_scope:its.service.DetailInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > link_off_;
  friend struct ::protobuf_traffic_5fpb_2eproto::TableStruct;
  friend void ::protobuf_traffic_5fpb_2eproto::InitDefaultsDetailInfoImpl();
};
// -------------------------------------------------------------------

class TrafficFlow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:its.service.TrafficFlow) */ {
 public:
  TrafficFlow();
  virtual ~TrafficFlow();

  TrafficFlow(const TrafficFlow& from);

  inline TrafficFlow& operator=(const TrafficFlow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficFlow(TrafficFlow&& from) noexcept
    : TrafficFlow() {
    *this = ::std::move(from);
  }

  inline TrafficFlow& operator=(TrafficFlow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficFlow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficFlow* internal_default_instance() {
    return reinterpret_cast<const TrafficFlow*>(
               &_TrafficFlow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TrafficFlow* other);
  friend void swap(TrafficFlow& a, TrafficFlow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficFlow* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficFlow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficFlow& from);
  void MergeFrom(const TrafficFlow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficFlow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 link_arr = 1;
  int link_arr_size() const;
  void clear_link_arr();
  static const int kLinkArrFieldNumber = 1;
  ::google::protobuf::uint64 link_arr(int index) const;
  void set_link_arr(int index, ::google::protobuf::uint64 value);
  void add_link_arr(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      link_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_link_arr();

  // repeated int32 car_cnt_arr = 2;
  int car_cnt_arr_size() const;
  void clear_car_cnt_arr();
  static const int kCarCntArrFieldNumber = 2;
  ::google::protobuf::int32 car_cnt_arr(int index) const;
  void set_car_cnt_arr(int index, ::google::protobuf::int32 value);
  void add_car_cnt_arr(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      car_cnt_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_car_cnt_arr();

  // repeated uint32 length_arr = 3;
  int length_arr_size() const;
  void clear_length_arr();
  static const int kLengthArrFieldNumber = 3;
  ::google::protobuf::uint32 length_arr(int index) const;
  void set_length_arr(int index, ::google::protobuf::uint32 value);
  void add_length_arr(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      length_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_length_arr();

  // repeated uint32 status_arr = 4;
  int status_arr_size() const;
  void clear_status_arr();
  static const int kStatusArrFieldNumber = 4;
  ::google::protobuf::uint32 status_arr(int index) const;
  void set_status_arr(int index, ::google::protobuf::uint32 value);
  void add_status_arr(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      status_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_status_arr();

  // repeated uint32 confidence_arr = 5;
  int confidence_arr_size() const;
  void clear_confidence_arr();
  static const int kConfidenceArrFieldNumber = 5;
  ::google::protobuf::uint32 confidence_arr(int index) const;
  void set_confidence_arr(int index, ::google::protobuf::uint32 value);
  void add_confidence_arr(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      confidence_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_confidence_arr();

  // repeated uint32 speed_without_light_arr = 6;
  int speed_without_light_arr_size() const;
  void clear_speed_without_light_arr();
  static const int kSpeedWithoutLightArrFieldNumber = 6;
  ::google::protobuf::uint32 speed_without_light_arr(int index) const;
  void set_speed_without_light_arr(int index, ::google::protobuf::uint32 value);
  void add_speed_without_light_arr(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      speed_without_light_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_speed_without_light_arr();

  // repeated uint32 speed_with_light_arr = 7;
  int speed_with_light_arr_size() const;
  void clear_speed_with_light_arr();
  static const int kSpeedWithLightArrFieldNumber = 7;
  ::google::protobuf::uint32 speed_with_light_arr(int index) const;
  void set_speed_with_light_arr(int index, ::google::protobuf::uint32 value);
  void add_speed_with_light_arr(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      speed_with_light_arr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_speed_with_light_arr();

  // repeated .its.service.DetailInfo details = 8;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 8;
  const ::its::service::DetailInfo& details(int index) const;
  ::its::service::DetailInfo* mutable_details(int index);
  ::its::service::DetailInfo* add_details();
  ::google::protobuf::RepeatedPtrField< ::its::service::DetailInfo >*
      mutable_details();
  const ::google::protobuf::RepeatedPtrField< ::its::service::DetailInfo >&
      details() const;

  // @@protoc_insertion_point(class_scope:its.service.TrafficFlow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > link_arr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > car_cnt_arr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > length_arr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > status_arr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > confidence_arr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > speed_without_light_arr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > speed_with_light_arr_;
  ::google::protobuf::RepeatedPtrField< ::its::service::DetailInfo > details_;
  friend struct ::protobuf_traffic_5fpb_2eproto::TableStruct;
  friend void ::protobuf_traffic_5fpb_2eproto::InitDefaultsTrafficFlowImpl();
};
// -------------------------------------------------------------------

class TrafficData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:its.service.TrafficData) */ {
 public:
  TrafficData();
  virtual ~TrafficData();

  TrafficData(const TrafficData& from);

  inline TrafficData& operator=(const TrafficData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficData(TrafficData&& from) noexcept
    : TrafficData() {
    *this = ::std::move(from);
  }

  inline TrafficData& operator=(TrafficData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficData* internal_default_instance() {
    return reinterpret_cast<const TrafficData*>(
               &_TrafficData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TrafficData* other);
  friend void swap(TrafficData& a, TrafficData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficData& from);
  void MergeFrom(const TrafficData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .its.service.TrafficMeta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::its::service::TrafficMeta& meta() const;
  ::its::service::TrafficMeta* release_meta();
  ::its::service::TrafficMeta* mutable_meta();
  void set_allocated_meta(::its::service::TrafficMeta* meta);

  // required .its.service.TrafficFlow flow = 2;
  bool has_flow() const;
  void clear_flow();
  static const int kFlowFieldNumber = 2;
  const ::its::service::TrafficFlow& flow() const;
  ::its::service::TrafficFlow* release_flow();
  ::its::service::TrafficFlow* mutable_flow();
  void set_allocated_flow(::its::service::TrafficFlow* flow);

  // @@protoc_insertion_point(class_scope:its.service.TrafficData)
 private:
  void set_has_meta();
  void clear_has_meta();
  void set_has_flow();
  void clear_has_flow();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::its::service::TrafficMeta* meta_;
  ::its::service::TrafficFlow* flow_;
  friend struct ::protobuf_traffic_5fpb_2eproto::TableStruct;
  friend void ::protobuf_traffic_5fpb_2eproto::InitDefaultsTrafficDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficMeta

// required string magic = 1;
inline bool TrafficMeta::has_magic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficMeta::set_has_magic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficMeta::clear_has_magic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficMeta::clear_magic() {
  magic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_magic();
}
inline const ::std::string& TrafficMeta::magic() const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.magic)
  return magic_.GetNoArena();
}
inline void TrafficMeta::set_magic(const ::std::string& value) {
  set_has_magic();
  magic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.magic)
}
#if LANG_CXX11
inline void TrafficMeta::set_magic(::std::string&& value) {
  set_has_magic();
  magic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:its.service.TrafficMeta.magic)
}
#endif
inline void TrafficMeta::set_magic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_magic();
  magic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:its.service.TrafficMeta.magic)
}
inline void TrafficMeta::set_magic(const char* value, size_t size) {
  set_has_magic();
  magic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:its.service.TrafficMeta.magic)
}
inline ::std::string* TrafficMeta::mutable_magic() {
  set_has_magic();
  // @@protoc_insertion_point(field_mutable:its.service.TrafficMeta.magic)
  return magic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficMeta::release_magic() {
  // @@protoc_insertion_point(field_release:its.service.TrafficMeta.magic)
  clear_has_magic();
  return magic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficMeta::set_allocated_magic(::std::string* magic) {
  if (magic != NULL) {
    set_has_magic();
  } else {
    clear_has_magic();
  }
  magic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magic);
  // @@protoc_insertion_point(field_set_allocated:its.service.TrafficMeta.magic)
}

// required uint32 version = 2;
inline bool TrafficMeta::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficMeta::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficMeta::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficMeta::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TrafficMeta::version() const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.version)
  return version_;
}
inline void TrafficMeta::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.version)
}

// required int32 region_id = 3;
inline bool TrafficMeta::has_region_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficMeta::set_has_region_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficMeta::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficMeta::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 TrafficMeta::region_id() const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.region_id)
  return region_id_;
}
inline void TrafficMeta::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.region_id)
}

// required fixed32 batch_time = 4;
inline bool TrafficMeta::has_batch_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficMeta::set_has_batch_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficMeta::clear_has_batch_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficMeta::clear_batch_time() {
  batch_time_ = 0u;
  clear_has_batch_time();
}
inline ::google::protobuf::uint32 TrafficMeta::batch_time() const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.batch_time)
  return batch_time_;
}
inline void TrafficMeta::set_batch_time(::google::protobuf::uint32 value) {
  set_has_batch_time();
  batch_time_ = value;
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.batch_time)
}

// required fixed32 update_time = 5;
inline bool TrafficMeta::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficMeta::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficMeta::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficMeta::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 TrafficMeta::update_time() const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.update_time)
  return update_time_;
}
inline void TrafficMeta::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.update_time)
}

// repeated string extra_keys = 6;
inline int TrafficMeta::extra_keys_size() const {
  return extra_keys_.size();
}
inline void TrafficMeta::clear_extra_keys() {
  extra_keys_.Clear();
}
inline const ::std::string& TrafficMeta::extra_keys(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.extra_keys)
  return extra_keys_.Get(index);
}
inline ::std::string* TrafficMeta::mutable_extra_keys(int index) {
  // @@protoc_insertion_point(field_mutable:its.service.TrafficMeta.extra_keys)
  return extra_keys_.Mutable(index);
}
inline void TrafficMeta::set_extra_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.extra_keys)
  extra_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrafficMeta::set_extra_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.extra_keys)
  extra_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrafficMeta::set_extra_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:its.service.TrafficMeta.extra_keys)
}
inline void TrafficMeta::set_extra_keys(int index, const char* value, size_t size) {
  extra_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:its.service.TrafficMeta.extra_keys)
}
inline ::std::string* TrafficMeta::add_extra_keys() {
  // @@protoc_insertion_point(field_add_mutable:its.service.TrafficMeta.extra_keys)
  return extra_keys_.Add();
}
inline void TrafficMeta::add_extra_keys(const ::std::string& value) {
  extra_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficMeta.extra_keys)
}
#if LANG_CXX11
inline void TrafficMeta::add_extra_keys(::std::string&& value) {
  extra_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:its.service.TrafficMeta.extra_keys)
}
#endif
inline void TrafficMeta::add_extra_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:its.service.TrafficMeta.extra_keys)
}
inline void TrafficMeta::add_extra_keys(const char* value, size_t size) {
  extra_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:its.service.TrafficMeta.extra_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficMeta::extra_keys() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficMeta.extra_keys)
  return extra_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficMeta::mutable_extra_keys() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficMeta.extra_keys)
  return &extra_keys_;
}

// repeated string extra_values = 7;
inline int TrafficMeta::extra_values_size() const {
  return extra_values_.size();
}
inline void TrafficMeta::clear_extra_values() {
  extra_values_.Clear();
}
inline const ::std::string& TrafficMeta::extra_values(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficMeta.extra_values)
  return extra_values_.Get(index);
}
inline ::std::string* TrafficMeta::mutable_extra_values(int index) {
  // @@protoc_insertion_point(field_mutable:its.service.TrafficMeta.extra_values)
  return extra_values_.Mutable(index);
}
inline void TrafficMeta::set_extra_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.extra_values)
  extra_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrafficMeta::set_extra_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:its.service.TrafficMeta.extra_values)
  extra_values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrafficMeta::set_extra_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:its.service.TrafficMeta.extra_values)
}
inline void TrafficMeta::set_extra_values(int index, const char* value, size_t size) {
  extra_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:its.service.TrafficMeta.extra_values)
}
inline ::std::string* TrafficMeta::add_extra_values() {
  // @@protoc_insertion_point(field_add_mutable:its.service.TrafficMeta.extra_values)
  return extra_values_.Add();
}
inline void TrafficMeta::add_extra_values(const ::std::string& value) {
  extra_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficMeta.extra_values)
}
#if LANG_CXX11
inline void TrafficMeta::add_extra_values(::std::string&& value) {
  extra_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:its.service.TrafficMeta.extra_values)
}
#endif
inline void TrafficMeta::add_extra_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:its.service.TrafficMeta.extra_values)
}
inline void TrafficMeta::add_extra_values(const char* value, size_t size) {
  extra_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:its.service.TrafficMeta.extra_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficMeta::extra_values() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficMeta.extra_values)
  return extra_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficMeta::mutable_extra_values() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficMeta.extra_values)
  return &extra_values_;
}

// -------------------------------------------------------------------

// DetailInfo

// repeated uint32 link_off = 1;
inline int DetailInfo::link_off_size() const {
  return link_off_.size();
}
inline void DetailInfo::clear_link_off() {
  link_off_.Clear();
}
inline ::google::protobuf::uint32 DetailInfo::link_off(int index) const {
  // @@protoc_insertion_point(field_get:its.service.DetailInfo.link_off)
  return link_off_.Get(index);
}
inline void DetailInfo::set_link_off(int index, ::google::protobuf::uint32 value) {
  link_off_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.DetailInfo.link_off)
}
inline void DetailInfo::add_link_off(::google::protobuf::uint32 value) {
  link_off_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.DetailInfo.link_off)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DetailInfo::link_off() const {
  // @@protoc_insertion_point(field_list:its.service.DetailInfo.link_off)
  return link_off_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DetailInfo::mutable_link_off() {
  // @@protoc_insertion_point(field_mutable_list:its.service.DetailInfo.link_off)
  return &link_off_;
}

// -------------------------------------------------------------------

// TrafficFlow

// repeated fixed64 link_arr = 1;
inline int TrafficFlow::link_arr_size() const {
  return link_arr_.size();
}
inline void TrafficFlow::clear_link_arr() {
  link_arr_.Clear();
}
inline ::google::protobuf::uint64 TrafficFlow::link_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.link_arr)
  return link_arr_.Get(index);
}
inline void TrafficFlow::set_link_arr(int index, ::google::protobuf::uint64 value) {
  link_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.link_arr)
}
inline void TrafficFlow::add_link_arr(::google::protobuf::uint64 value) {
  link_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.link_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TrafficFlow::link_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.link_arr)
  return link_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TrafficFlow::mutable_link_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.link_arr)
  return &link_arr_;
}

// repeated int32 car_cnt_arr = 2;
inline int TrafficFlow::car_cnt_arr_size() const {
  return car_cnt_arr_.size();
}
inline void TrafficFlow::clear_car_cnt_arr() {
  car_cnt_arr_.Clear();
}
inline ::google::protobuf::int32 TrafficFlow::car_cnt_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.car_cnt_arr)
  return car_cnt_arr_.Get(index);
}
inline void TrafficFlow::set_car_cnt_arr(int index, ::google::protobuf::int32 value) {
  car_cnt_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.car_cnt_arr)
}
inline void TrafficFlow::add_car_cnt_arr(::google::protobuf::int32 value) {
  car_cnt_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.car_cnt_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrafficFlow::car_cnt_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.car_cnt_arr)
  return car_cnt_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrafficFlow::mutable_car_cnt_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.car_cnt_arr)
  return &car_cnt_arr_;
}

// repeated uint32 length_arr = 3;
inline int TrafficFlow::length_arr_size() const {
  return length_arr_.size();
}
inline void TrafficFlow::clear_length_arr() {
  length_arr_.Clear();
}
inline ::google::protobuf::uint32 TrafficFlow::length_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.length_arr)
  return length_arr_.Get(index);
}
inline void TrafficFlow::set_length_arr(int index, ::google::protobuf::uint32 value) {
  length_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.length_arr)
}
inline void TrafficFlow::add_length_arr(::google::protobuf::uint32 value) {
  length_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.length_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrafficFlow::length_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.length_arr)
  return length_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrafficFlow::mutable_length_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.length_arr)
  return &length_arr_;
}

// repeated uint32 status_arr = 4;
inline int TrafficFlow::status_arr_size() const {
  return status_arr_.size();
}
inline void TrafficFlow::clear_status_arr() {
  status_arr_.Clear();
}
inline ::google::protobuf::uint32 TrafficFlow::status_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.status_arr)
  return status_arr_.Get(index);
}
inline void TrafficFlow::set_status_arr(int index, ::google::protobuf::uint32 value) {
  status_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.status_arr)
}
inline void TrafficFlow::add_status_arr(::google::protobuf::uint32 value) {
  status_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.status_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrafficFlow::status_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.status_arr)
  return status_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrafficFlow::mutable_status_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.status_arr)
  return &status_arr_;
}

// repeated uint32 confidence_arr = 5;
inline int TrafficFlow::confidence_arr_size() const {
  return confidence_arr_.size();
}
inline void TrafficFlow::clear_confidence_arr() {
  confidence_arr_.Clear();
}
inline ::google::protobuf::uint32 TrafficFlow::confidence_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.confidence_arr)
  return confidence_arr_.Get(index);
}
inline void TrafficFlow::set_confidence_arr(int index, ::google::protobuf::uint32 value) {
  confidence_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.confidence_arr)
}
inline void TrafficFlow::add_confidence_arr(::google::protobuf::uint32 value) {
  confidence_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.confidence_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrafficFlow::confidence_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.confidence_arr)
  return confidence_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrafficFlow::mutable_confidence_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.confidence_arr)
  return &confidence_arr_;
}

// repeated uint32 speed_without_light_arr = 6;
inline int TrafficFlow::speed_without_light_arr_size() const {
  return speed_without_light_arr_.size();
}
inline void TrafficFlow::clear_speed_without_light_arr() {
  speed_without_light_arr_.Clear();
}
inline ::google::protobuf::uint32 TrafficFlow::speed_without_light_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.speed_without_light_arr)
  return speed_without_light_arr_.Get(index);
}
inline void TrafficFlow::set_speed_without_light_arr(int index, ::google::protobuf::uint32 value) {
  speed_without_light_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.speed_without_light_arr)
}
inline void TrafficFlow::add_speed_without_light_arr(::google::protobuf::uint32 value) {
  speed_without_light_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.speed_without_light_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrafficFlow::speed_without_light_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.speed_without_light_arr)
  return speed_without_light_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrafficFlow::mutable_speed_without_light_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.speed_without_light_arr)
  return &speed_without_light_arr_;
}

// repeated uint32 speed_with_light_arr = 7;
inline int TrafficFlow::speed_with_light_arr_size() const {
  return speed_with_light_arr_.size();
}
inline void TrafficFlow::clear_speed_with_light_arr() {
  speed_with_light_arr_.Clear();
}
inline ::google::protobuf::uint32 TrafficFlow::speed_with_light_arr(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.speed_with_light_arr)
  return speed_with_light_arr_.Get(index);
}
inline void TrafficFlow::set_speed_with_light_arr(int index, ::google::protobuf::uint32 value) {
  speed_with_light_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:its.service.TrafficFlow.speed_with_light_arr)
}
inline void TrafficFlow::add_speed_with_light_arr(::google::protobuf::uint32 value) {
  speed_with_light_arr_.Add(value);
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.speed_with_light_arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrafficFlow::speed_with_light_arr() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.speed_with_light_arr)
  return speed_with_light_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrafficFlow::mutable_speed_with_light_arr() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.speed_with_light_arr)
  return &speed_with_light_arr_;
}

// repeated .its.service.DetailInfo details = 8;
inline int TrafficFlow::details_size() const {
  return details_.size();
}
inline void TrafficFlow::clear_details() {
  details_.Clear();
}
inline const ::its::service::DetailInfo& TrafficFlow::details(int index) const {
  // @@protoc_insertion_point(field_get:its.service.TrafficFlow.details)
  return details_.Get(index);
}
inline ::its::service::DetailInfo* TrafficFlow::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:its.service.TrafficFlow.details)
  return details_.Mutable(index);
}
inline ::its::service::DetailInfo* TrafficFlow::add_details() {
  // @@protoc_insertion_point(field_add:its.service.TrafficFlow.details)
  return details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::its::service::DetailInfo >*
TrafficFlow::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:its.service.TrafficFlow.details)
  return &details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::its::service::DetailInfo >&
TrafficFlow::details() const {
  // @@protoc_insertion_point(field_list:its.service.TrafficFlow.details)
  return details_;
}

// -------------------------------------------------------------------

// TrafficData

// required .its.service.TrafficMeta meta = 1;
inline bool TrafficData::has_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficData::set_has_meta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficData::clear_has_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficData::clear_meta() {
  if (meta_ != NULL) meta_->Clear();
  clear_has_meta();
}
inline const ::its::service::TrafficMeta& TrafficData::meta() const {
  const ::its::service::TrafficMeta* p = meta_;
  // @@protoc_insertion_point(field_get:its.service.TrafficData.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::its::service::TrafficMeta*>(
      &::its::service::_TrafficMeta_default_instance_);
}
inline ::its::service::TrafficMeta* TrafficData::release_meta() {
  // @@protoc_insertion_point(field_release:its.service.TrafficData.meta)
  clear_has_meta();
  ::its::service::TrafficMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::its::service::TrafficMeta* TrafficData::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) {
    meta_ = new ::its::service::TrafficMeta;
  }
  // @@protoc_insertion_point(field_mutable:its.service.TrafficData.meta)
  return meta_;
}
inline void TrafficData::set_allocated_meta(::its::service::TrafficMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_;
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    set_has_meta();
  } else {
    clear_has_meta();
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:its.service.TrafficData.meta)
}

// required .its.service.TrafficFlow flow = 2;
inline bool TrafficData::has_flow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficData::set_has_flow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficData::clear_has_flow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficData::clear_flow() {
  if (flow_ != NULL) flow_->Clear();
  clear_has_flow();
}
inline const ::its::service::TrafficFlow& TrafficData::flow() const {
  const ::its::service::TrafficFlow* p = flow_;
  // @@protoc_insertion_point(field_get:its.service.TrafficData.flow)
  return p != NULL ? *p : *reinterpret_cast<const ::its::service::TrafficFlow*>(
      &::its::service::_TrafficFlow_default_instance_);
}
inline ::its::service::TrafficFlow* TrafficData::release_flow() {
  // @@protoc_insertion_point(field_release:its.service.TrafficData.flow)
  clear_has_flow();
  ::its::service::TrafficFlow* temp = flow_;
  flow_ = NULL;
  return temp;
}
inline ::its::service::TrafficFlow* TrafficData::mutable_flow() {
  set_has_flow();
  if (flow_ == NULL) {
    flow_ = new ::its::service::TrafficFlow;
  }
  // @@protoc_insertion_point(field_mutable:its.service.TrafficData.flow)
  return flow_;
}
inline void TrafficData::set_allocated_flow(::its::service::TrafficFlow* flow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flow_;
  }
  if (flow) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flow, submessage_arena);
    }
    set_has_flow();
  } else {
    clear_has_flow();
  }
  flow_ = flow;
  // @@protoc_insertion_point(field_set_allocated:its.service.TrafficData.flow)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace its

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_5fpb_2eproto__INCLUDED
